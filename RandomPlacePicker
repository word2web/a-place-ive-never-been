import math
import random

def dms_to_decimal(degrees, minutes, seconds, direction):
    decimal = degrees + minutes / 60 + seconds / 3600
    if direction in ['S', 'W']:
        decimal = -decimal
    return decimal

def decimal_to_dms(decimal):
    degrees = int(decimal)
    minutes = int((decimal - degrees) * 60)
    seconds = (decimal - degrees - minutes / 60) * 3600
    return degrees, minutes, seconds

def generate_random_coordinates(lat, lon, radius_miles):
    # Convert radius from miles to kilometers
    radius_km = radius_miles * 1.60934

    # Generate a random distance within the radius
    distance_km = random.uniform(0, radius_km)

    # Generate a random angle in radians
    angle_rad = random.uniform(0, 2 * math.pi)

    # Convert latitude and longitude to radians
    lat_rad = math.radians(lat)
    lon_rad = math.radians(lon)

    # Calculate new latitude and longitude
    new_lat_rad = math.asin(math.sin(lat_rad) * math.cos(distance_km / 6371) +
                   math.cos(lat_rad) * math.sin(distance_km / 6371) * math.cos(angle_rad))
    new_lon_rad = lon_rad + math.atan2(math.sin(angle_rad) * math.sin(distance_km / 6371) * math.cos(lat_rad),
                                      math.cos(distance_km / 6371) - math.sin(lat_rad) * math.sin(new_lat_rad))

    # Convert new latitude and longitude back to degrees
    new_lat = math.degrees(new_lat_rad)
    new_lon = math.degrees(new_lon_rad)

    # Ensure longitude is within -180 to 180 degrees
    new_lon = (new_lon + 540) % 360 - 180

    return new_lat, new_lon

def haversine_distance(lat1, lon1, lat2, lon2):
    # Convert latitude and longitude from degrees to radians
    lat1_rad = math.radians(lat1)
    lon1_rad = math.radians(lon1)
    lat2_rad = math.radians(lat2)
    lon2_rad = math.radians(lon2)

    # Haversine formula
    dlat = lat2_rad - lat1_rad
    dlon = lon2_rad - lon1_rad
    a = math.sin(dlat / 2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon / 2)**2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    distance_km = 6371 * c
    distance_miles = distance_km * 0.621371

    return distance_miles

# Given coordinates
lat_dms = 55
lat_min = 46
lat_sec = 27
lat_dir = 'N'
lon_dms = 3
lon_min = 55
lon_sec = 6
lon_dir = 'W'

# Convert given coordinates to decimal degrees
lat = dms_to_decimal(lat_dms, lat_min, lat_sec, lat_dir)
lon = dms_to_decimal(lon_dms, lon_min, lon_sec, lon_dir)

# Generate a random set of coordinates within a 100-mile radius
new_lat, new_lon = generate_random_coordinates(lat, lon, 100)

# Convert new coordinates to DMS format
new_lat_dms = decimal_to_dms(new_lat)
new_lon_dms = decimal_to_dms(abs(new_lon))  # Use absolute value for DMS conversion

# Determine directions
lat_direction = 'N' if new_lat >= 0 else 'S'
lon_direction = 'E' if new_lon >= 0 else 'W'

# Print the new coordinates
print(f"Original coordinates: {lat_dms}째{lat_min}'{lat_sec}\"{lat_dir} {lon_dms}째{lon_min}'{lon_sec}\"{lon_dir}")
print(f"New coordinates: {new_lat_dms[0]}째{new_lat_dms[1]}'{new_lat_dms[2]:.2f}\"{lat_direction} "
      f"{new_lon_dms[0]}째{new_lon_dms[1]}'{new_lon_dms[2]:.2f}\"{lon_direction}")

# Calculate and print the distance
distance = haversine_distance(lat, lon, new_lat, new_lon)
print(f"Distance from original to new coordinates: {distance:.2f} miles")
